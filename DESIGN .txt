Starter_Classes.Action:
executeAnimationAction - moved from Starter_Classes.Functions, Starter_Classes.Action was in the name as well as multiple references to
Starter_Classes.Action specific data (cohesion), event scheduler is a parameter but only has method access

executeAction - moved from Starter_Classes.Functions, Starter_Classes.Action was in the name and data/methods specific to the action class was
referenced in the body (cohesion)

executeActivityAction - moved from Starter_Classes.Functions, Starter_Classes.Action was in the name and there were many references to
data/methods specific to the action class (cohesion)

Starter_Classes.Background:
getCurrentImage - okay honestly I knew I had to put something in this class but I wasn't sure what but
then I realized I could overload getCurrentImage by splitting it into two methods and this one just takes
a background object as its paramter so it made perfect sense to put this one in Starter_Classes.Background because it only
accesses background data (cohesion)

Entity:
nextImage - moved from Starter_Classes.Functions, only referenced entity class data (cohesion) and this allowed the function
to take no parameters

executeSaplingActivity - moved from Starter_Classes.Functions, multiple references to entity class data (cohesion), also it just makes
sense that the entities would execute their own activities.

executeTreeActivity- moved from Starter_Classes.Functions, multiple references to entity class data (cohesion), also it just makes
sense that the entities would execute their own activities.

executeDudeNotFullActivity - moved from Starter_Classes.Functions, multiple references to entity class data (cohesion), also it just makes
sense that the entities would execute their own activities.

executeDudeFullActivity - moved from Starter_Classes.Functions, multiple references to entity class data (cohesion), also it just makes
sense that the entities would execute their own activities.

moveToFull - moved from Starter_Classes.Functions, multiple references to entity class data (cohesion)

transformFull - moved from Starter_Classes.Functions, only references entity class data (cohesion), and it makes sense
that entities would deal with transforming themselves


getAnimationPeriod - moved from Starter_Classes.Functions, deals exclusively with entity class data (cohesion)

transformNotFull - moved from Starter_Classes.Functions, deals exclusively with entity class data (cohesion), and it makes sense
that entities would deal with transforming themselves

transformPlant - moved from Starter_Classes.Functions, multiple references to entity class data (cohesion), and it makes sense
that entities would deal with transforming themselves

transformTree - moved from Starter_Classes.Functions, multiple references to entity class data (cohesion), and it makes sense
that entities would deal with transforming themselves

transformSapling - moved from Starter_Classes.Functions, multiple references to entity class data (cohesion), and it makes sense
that entities would deal with transforming themselves

scheduleActions - moved from Starter_Classes.Functions, this one was conflicting because the name makes it sound like it should go
in the eventscheduler, but it only called event scheduler method, whereas it referenced entity specific data

moveEntity - moved from Starter_Classes.Functions, exclusively makes references to entity specific data and it makes sense
that entities could move themselves

nextPositionFairy - moved from Starter_Classes.Functions, this one was tricky, it makese reference to entity specific data but
part of that data is a point so it makes reference to point specific data (x, y). Ultimately i decided that the point
really didn't need access to entity data, in terms of heirarchy i would put it lower than entity.

moveToFairy - moved from Starter_Classes.Functions, exclusively makes references to entity specific data and it makes sense
that entities could move themselves

removeEntity - moved from Starter_Classes.Functions, makes one reference to entity specific data, i guess it makes sense that
entities could remove themselves

executeFairyActivity - moved from Starter_Classes.Functions, multiple references to entity class data (cohesion), also it just makes
sense that the entities would execute their own activities.

tryAddEntity - moved from Starter_Classes.Functions, deals exclusively with entity class data (cohesion)

nextPositionDude - moved from functions, references both entity and point class data, in terms of heirarchy
point doesn't need access to entity data; entity relys on point not the other way around

moveToNotFull - moved from functions, references two entity objects data, (cohesion)

getCurrentImage - moved from functions, this function originally part of another function that i split into two and
overloaded so that this getCurrentImage method only takes in entity objects and only deals with entity data

createAnimationAction - takes in one entity object and an integer so it might as well go in entity, theres no
integer class to put it into. Even though it doesn't really access entity data or methods, it removes atleast
one of the parameters so its more readable when calling, no need for Starter_Classes.Functions.

createActivityAction - I thought about putting this in world, since entity doesn't rely on world objects why should
I put a method in here that calls it. But, while it doesn't access entity data or methods, it doesn't access
world methods or data either. Ultimately it came down to the fact that this method is only used in the entity class
so, why make more work for myself and have to call it from another class when it could stay in entity and only
be used in entity, (cohesion)

adjacent - only used in this file, even though it accesses point data its only used here and point is lower in
data heirarchy also it looks like we aren't allowed to put methods in point

createDudeFull - only used in this file

getIntFromRange - only used in this file

getNumFromRange - only used in this file


Starter_Classes.Event:
removePendingEvent - I saw that I had to put something in the Starter_Classes.Event class and this was the only function that
referenced Starter_Classes.Event data specifically, even though it also accesses Starter_Classes.EventScheduler data, gotta put it somehwere

Starter_Classes.EventScheduler:
scheduleEvent - moved from Starter_Classes.Functions, well its in the name, and it exclusively deals with Starter_Classes.EventScheduler data
(cohesion)
unscheduleAllEvents - moved from Starter_Classes.Functions, deals with data specific to Starter_Classes.EventScheduler and the name makes sense
updateOnTime - movd from Starter_Classes.Functions, deals exclusively with Starter_Classes.EventScheduler specific data and it takes only one
double parameter rather than a class

Starter_Classes.ImageStore:
getImageList - moved from Starter_Classes.Functions, its in the name and deals exclusively with Starter_Classes.ImageStore data
loadImages - moved from Starter_Classes.Functions, its in the name and only makes one reference to Starter_Classes.ImageStore data
processImageLine - only used in this file
setAlpha - only used in this file
getImages - only used in this file

Starter_Classes.Point:

Starter_Classes.Viewport:
contains - moved from Starter_Classes.Functions, this function deals with data from both Starter_Classes.Point and Starter_Classes.Viewport, so for me it came down
to what makese sense with the title. point contains viewport? or viewport contains point? the latter makes more
grammatical sense to me.
shift - moved from Starter_Classes.Functions, deals exclusively with Starter_Classes.Viewport specific data, now it only takes two ints
worldToViewport - moved from Starter_Classes.Functions, its in the name and it only deals with ViewPort specif data  (cohesion)
viewportToWorld - moved from Starter_Classes.Functions, its in the name and it only deals with ViewPort specif data  (cohesion)
update - onlu used in this file


VirtualWorld:



Starter_Classes.WorldModel:

getOccupancyCell - references both point and worldmodel data but it makese sense that point shouldn't have access
to Starter_Classes.WorldModel data

setOccupancyCell - references both point and worldmodel data but it makese sense that point shouldn't have access
to Starter_Classes.WorldModel data

parseBackgroundRow - only makese references to Starter_Classes.WorldModel data

setBackgroundCell - references both point and worldmodel data but it makese sense that point shouldn't have access
to Starter_Classes.WorldModel data. Now it does look like background data might be access but honestly there's no method in backgorund
that specifies what to return if it's passed two points in brackets so I didn't want to assume background
data was being meddled with here.

getBackgroundCell - references both point and worldmodel data but it makese sense that point shouldn't have access
to Starter_Classes.WorldModel dataNow it does look like background data might be access but honestly there's no method in backgorund
that specifies what to return if it's passed two points in brackets so I didn't want to assume background
data was being meddled with here.

parseSaveFile - only makes references to Starter_Classes.WorldModel data (cohesion)

load - only makes references to Starter_Classes.WorldModel data (cohesion)

getOccupant - this method takes both Starter_Classes.Point and Starter_Classes.WorldModel as paremeters, and doesn't really access the data of either,
just WorldModels methods, due to the heriarchy of these classes, point shouldn't concern itself with worldmodel methods.

withinBounds - references both point and worldmodel data but it makese sense that point shouldn't have access
to Starter_Classes.WorldModel data

scheduleActions - only references Starter_Classes.WorldModel data once

findNearest - wasn't really sure on this one, calls both entity and worldmodel specific data but putting it in
Worldview removes need for one paramter whereas putting it in entity woulnd't because it creates the entity in
the body of the method

parseSapling - It wasn't very obvious where to put the parse functions, I just decided that
because Starter_Classes.WorldModel came first in the parameter list, and because Starter_Classes.WorldModel seemed like the paremter
that was the most encompassing class, like yeah the Starter_Classes.WorldModel should parse its entities right?

parseDude - because Starter_Classes.WorldModel came first in the parameter list, and because Starter_Classes.WorldModel seemed like the paremter
that was the most encompassing class, like yeah the Starter_Classes.WorldModel should parse its entities right?

parseFairy - because Starter_Classes.WorldModel came first in the parameter list, and because Starter_Classes.WorldModel seemed like the paremter
that was the most encompassing class, like yeah the Starter_Classes.WorldModel should parse its entities right?

parseTree - because Starter_Classes.WorldModel came first in the parameter list, and because Starter_Classes.WorldModel seemed like the paremter
that was the most encompassing class, like yeah the Starter_Classes.WorldModel should parse its entities right?

parseObstacle - because Starter_Classes.WorldModel came first in the parameter list, and because Starter_Classes.WorldModel seemed like the paremter
that was the most encompassing class, like yeah the Starter_Classes.WorldModel should parse its entities right?

parseHouse - because Starter_Classes.WorldModel came first in the parameter list, and because Starter_Classes.WorldModel seemed like the paremter
that was the most encompassing class, like yeah the Starter_Classes.WorldModel should parse its entities right?

parseStump - because Starter_Classes.WorldModel came first in the parameter list, and because Starter_Classes.WorldModel seemed like the paremter
that was the most encompassing class, like yeah the Starter_Classes.WorldModel should parse its entities right?

parseEntity - because Starter_Classes.WorldModel came first in the parameter list, and because Starter_Classes.WorldModel seemed like the paremter
that was the most encompassing class, like yeah the Starter_Classes.WorldModel should parse its entities right?

removeEntityAt - I was conflicted on this method because it calls class specific data from both world and entity
but ultimately I realized that the worldModel class relies on entity, not the other way around, so entity doesn't
need access to worldModel data as much as worldModel

getBackgroundImage - didn't access data to either, but world has higher heirarchy and it does access world
methods so

isOccupied - takes in a worldmodel and point object, but uses worldmodel methods so due to the heriarchy of
these classes it makes sense that point shouldn't concern itself with worldmodel methods.

addEntity - moved from Starter_Classes.Functions, deals with data specfic to both Starter_Classes.WorldModel and Entity, but worldmodel relies
entity, not the other way around, so the lesser of two evils is for world to access entity data rather than
entity to access world data.

createFairy - only used in this file, though it doesn't actually deal with entity data, it'll make my code
more readable to put it in this file (no .Starter_Classes.Functions)

createObstacle - only used in this file

createHouse - only used in this file

nearestEntity - only used in this file

distanceSquared - only used in this file


Starter_Classes.WorldView:
shiftView - contains multiple references to Starter_Classes.WorldView specific data (cohesion) while it does call upon viewport
data and methods as well, worldView relys on viewPort, not the other way around, so viewport shouldn't concern
itself with worldView data.

clamp - though this function only takes in integers, its only used in this file so it will make my code more readable
to put it in here

drawBackground - acceses worldview specific data

entities - acceses worldview specific data

Starter_Classes.Functions:
createTree - this function is used in two different files, but doesn't actually access data thats specfific to those class
objects, so both files deserve equal access to it


createStump - this function is used in two different files, but doesn't actually access data thats specfific to those class
objects, so both files deserve equal access to it

createSapling - this function is used in two different files, but doesn't actually access data thats specfific to those class
objects, so both files deserve equal access to it

createDudeNotFull - this function is used in two different files, but doesn't actually access data thats specfific to those class
objects, so both files deserve equal access to it


COPY THE ENTITY CLASS TO ALL 8 OF ITS SUBCLASSES. THEN SEE WHAT IS ALL THE SAME AND WHAT IS SPECIFIC TO CERTAIN CLASSES BASED
ON WHERE AND HOW ITS USED.